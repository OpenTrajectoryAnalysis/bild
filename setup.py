# Usage and Rationales for this setup.py
#
# Using cython code involves two steps: .pyx --> .c --> .so
# The .pyx file is the source file we write; cython transpiles this into .c,
# which is then compiled into .so. The two steps have different dependencies
# and issues:
# - transpilation requires a cython installation (and potentially more build
#   environment (scipy BLAS) / cleanup / etc.; see below, where we clean up
#   some comments in the .c file)
# - compilation is platform specific
# 
# Therefore, we should
# - provide the .c file to the end-user, so they can recompile without having
#   to cythonize
# - write this file such that it can do that without needing a cython
#   installation
# - at the same time, of course include the cythonization code here
#
# Usage
# - ``python -c "from setup import extensions, cythonize; cythonize(extensions)"``
#   will transpile (.pyx --> .c)
# - ``python setup.py build_ext --inplace``
#   will compile (.c --> .so). No cython required!
# - ``CYTHONIZE=1 python setup.py build_ext --inplace``
#   will do everything at once: .pyx --> .c --> .so
# - ``PYTHON_ONLY=1 python setup.py build_ext --inplace``
#   will ignore the cython extensions and fall back to using the python drop-in

import os
import re
from setuptools import dist, Extension, setup

import numpy

CYTHONIZE   = os.getenv('CYTHONIZE')   == "1"
PYTHON_ONLY = os.getenv('PYTHON_ONLY') == "1"

if PYTHON_ONLY:
    extensions = []
else:
    extensions = [
        Extension(
            "bild.bin.MSRouse_logL", ["bild/src/MSRouse_logL.pyx"],
            define_macros=[('NPY_NO_DEPRECATED_API', 'NPY_1_7_API_VERSION')],
        ),
    ]

def cythonize(extensions):
    # This relies on the requirements in `cython_requirements.txt`
    # Cythonization (.pyx --> .c) should always be done locally, so these
    # requirements are separate from the install requirements in pyproject.toml
    from Cython.Build import cythonize

    extensions = cythonize(extensions,
                    compiler_directives = {'language_level' : '3'},
                )

    # Remove hash strings from comments in the .c to prevent the file from
    # changing on every build (which freaks out git)
    for ext in extensions:
        for cfile in ext.sources:
            with open(cfile, 'r') as f:
                lines = f.readlines()
            with open(cfile, 'w') as f:
                for line in lines:
                    m = re.search('(pip-build-env-)[^/]*/', line)
                    if m:
                        line = ( line[:m.start()]
                                  + m[1]
                                  + '<hash_removed>'
                                  + line[m.end()-1:]
                                )
                    f.write(line)

    return extensions

if __name__ == '__main__':
    if CYTHONIZE:
        extensions = cythonize(extensions)
    else:
        # use .c instead of .pyx sources
        # (which were generated by an earlier cythonize run)
        for ext in extensions:
            for i, fname in enumerate(ext.sources):
                ext.sources[i] = re.sub('.pyx$', '.c', fname)
    setup(
        ext_modules  = extensions,
        include_dirs = [numpy.get_include()],
        zip_safe     = False,
    )
